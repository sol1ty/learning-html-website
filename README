# learning-html-website
## Базовая информация
Чтобы создать HTML структуру надо в файле с расширением .html поставить ! и нажать TAB

Существует два вида тегов: одинарные и двойные. Одинарные - <img>, которые не имеют закрывающего тега. Двойные - <div></div> и т.д 

Теги делятся на блочные (block) и строчные (inline). Блочные занимают ВСЮ ШИРИНУ экрана, строчные занимают лишь ту часть, где
есть элемент (текст и т.д). Пример строчных тегов: 
<a> - ссылка
<span> - Определяет строчный элемент 
<q> - цитата

Пример блочных тегов: 
<div> - создаёт блок
<h1> - <h6> - заголовки
<form> - для создания формы
Все теги связанные со списками - <ul>, <ol>, <li>
И многие другие (информацию можно найти в интернете)

Подключение стилей делается тегом <link>

Подключение скриптов тегом <script>

Здесь я буду "дробить" стили, чтобы было удобнее работать (когда в проекте условно 10к строк кода, не удобно писать всё в одном файле),
Однако можно писать всё в style.css

ПО ПОВОДУ РАБОТЫ С ДИЗАЙНОМ. Если у вас картинки векторные (приближаешь и не ухудшается качество) - сохранять в формате .svg и без
контейнера, сугубо векторное изображение

Всё должно быть структурировано по папкам: картинки в img, стили в css, джаваскрипт в js и далее по списку.

## СТРУКТУРА МЕНЮ
<ul>
    <li><a href="">Text</a></li>
</ul>
<ul> - Немаркированный список
<li> - Элемент списка
<a> - ссылка, <a> имеет атрибут href - это куда он будет вести, будь-то отдельный сайт или элемент на странице. Между открывающим и
закрывающим тегами <a> вставлять текст, при нажатии на который будет переходить по ссылке
P.S. Между тегами <a> вместо текста может быть картинка, которая будет кликабельной

## Свойства картинок (object-fit: contain; и object-fit: cover;)
Свойства .header-logo - это надо для того, чтобы при замене картинки на любую высоту и ширину она оставалось адекватного размера и 
не ломало стили
object-fit: contain - подгоняет картинку под размеры контейнера 
object-fit: cover - растягивает изображение на всю ширину контейнера

## Работа со стилями
В шрифтах я создал классы, которые дают стили, чтобы постоянно не прописывать их отдельно. Дать класс с определенными стилями
всё равно что написать в стилях font-family: Нужный_параметр;

Создавать доп.классов со стилями можно сколько угодно, однако здесь я не буду этого делать, тк просто объясняю что к чему, создал
только шрифты и main-container.
Для чего это делать? Чтобы если на сайте есть одинаковые элементы с одинаковыми стилями, к примеру: заголовки, текст, кнопки и т.д,
давать один класс и прописать стиль один раз (не дублировать код) + потому что ты можешь поменять стили условных заголков /
кнопок один раз и они поменяются везде.
### ВАЖНО ПРИ ИСПОЛЬЗОВАНИЕ КЛАССОВ
Надо смотреть, чтобы не было конфликтов стилей и они применялись корректно 

Для чего выносить стили? Чтобы было удобнее работать и не путаться в файлах. Намного удобнее работать с файлом у которого всего 100
строк, нежели у которого 1000

Здесь не будет "вложенных" стилей. Исключительно начальный уровень

Все обращения в цсс либо по классам .class-name либо по айди #id-name
Если писать обращение к элементам без вложенности - могут быть конфликты стилей

Структура @media screen and используется для написания адаптивной верстки, то есть для других устройств. Из основного это 
@media screen and (max-width: ..px) {} - стили, применяющиеся от ширина экрана указанного в скобках и ниже (ограничиваются верхней
чертой), так-же могут быть min-width - ограничивать нижней чертой, то есть от "минимальнй высоты" и выше

## ВИДЫ СТИЛЕЙ
Есть 3 вида стилей: внешние, внутренние и вложенные
1. Внешние:
Отдельный css файл (так делать нужно и если у вас много стилей, то это единственно верный вариант), здесь они как раз и использованы

2. Внутренние:
Добавлются в тег <head> с помощью тега <style>, синтаксис идентичен стандартному цсс. Обычно используется, если у вас всего один блок
на проекте и вам надо его просто показать кому-то
<head>
    <style>
        h1 {
            margin: 0;
        }
    </style>
</head>

3. Вложенные:
Прописываются непосредственно в самом элементе с помощью атрибута style. Обычно используется в таких тегах как <span> чтобы выделить
определенную часть. Стили можно прописывать любые, однако чаще всего применяется с цветом
Атрибут style="style_name: parameter;"
style_name - Свойство, которые вы хотите поменять: цвет, шрифт, размер шрифта, ширина / высота, что угодно
parameter - Значение того свойства, которое вы хотите поменять
Пример:
<span style="color: red;">Text color is read</span>

## Основной тег, который используется для создания контейнеров
<div> - контейнер, это основной тег, который будет использоваться. Однако есть много разных тегов, которые тоже можно использовать 

## Все теги которые были использованы в проекте (не включая скелет:<!DOCTYPE>, <html>, <head>, <body> и "мета-теги"):
<title> - Пишется внутри <head>, отвечает за заголовок на вкладке (что светится в открытой вкладке, название сайта)
<link rel="" href=""> - тег линк отвечает за подключение цсс стилей, шрифтов и т.д. В нашем случае в атрибуте rel указана 
"Таблица стилей", в атрибуте href - ссылка
rel - relationship (Отношение)
href - ссылка на ресурс (или внутренний, или внешний)

<header> - шапка сайта, можно так-же вместо этого тега использовать <div>

<div> - Описан выше

### ТЕГ <a>
<a> - гиперссылка. Текст, отображаемый на ссылке пишется между открывающим и закрывающим тегами <a>TEXT</a>, так-же можно между ними
Вставить картинку
<a>
    <img>
</a>

### ТЕГ <img> и <svg>
<img> - выводит картинку, у тега <img> есть атрибут src (source) - в него выводится ссылка на картинку (внешняя или внутренняя), а
так-же атрибут alt - он отвечает за "альтернативный текст", в случае если сайт не может найти / открыть картинку
<svg> - используется для вывода векторных изображений. Чаще всего при вставке векторных изображений у него уже есть готовый код для
вставки, так что я не буду рассказывать про атрибуты. Однако если хотите поменять цвет вектора, это делается через атрибут fill, а
размеры через атрибуты width и height соответственно. Это так-же можно сделать через css

### Теги <ul> и <li> 
<ul> - Немаркированный список (с точечками в каждом элементе списка)
<li> - Элемент списка. Без него нельзя сделать список

### Теги заголовков
<h1> - Заголовок первого уровня. Он может быть только ОДИН на странице. Формально его можно сколько угодно раз вывести, однако это
не верно с точки зрения SEO и он должен быть только один на странице
В последствии можно использовать <h2> - Заголовок второго уровня и далее по списку
P.S = У тегов заголовков и тегов списка есть свои отступы (стандартные), их нужно убирать в цсс через margin: 0 (Отключить внешний 
отступ)
